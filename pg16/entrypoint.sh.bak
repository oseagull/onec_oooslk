#!/bin/bash

set -e

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

# Ensure the script is run as root
if [ "$(id -u)" != "0" ]; then
    log "This script must be run as root"
    exit 1
fi

initialize_database() {
    log "Initializing database..."
    if [ -z "$PG_PASSWORD" ]; then
        log "ERROR: PG_PASSWORD must be set for database initialization"
        exit 1
    fi
    
    if ! gosu postgres /opt/pgpro/1c-16/bin/initdb -D "$PGDATA" --auth-host=md5 --auth-local=peer; then
        log "Database initialization failed"
        exit 1
    fi
    
    encrypted_pass=$(gosu postgres psql -t -c "SELECT concat('md5', md5('$PG_PASSWORD' || 'postgres'))")
    gosu postgres psql -c "ALTER USER postgres WITH PASSWORD '$encrypted_pass';"
    log "Database initialized with provided password"
}

configure_postgresql() {
    log "Configuring PostgreSQL..."

    # Directly edit postgresql.conf
    {
        echo "# Custom settings"
        echo "synchronous_commit = off"
        echo "unix_socket_directories = '/tmp,$PGSOCKET'"
        echo "listen_addresses = '*'"

        if [ "${INCLUDE_PGDEFAULT:-no}" = "yes" ] && [ -f /pgdefault.conf ]; then
            echo ""  # Add a newline for clarity
            echo "# Include contents from pgdefault.conf"
            cat /pgdefault.conf
        fi
    } >> "$PGDATA/postgresql.conf"

    # Directly edit pg_hba.conf
    echo "host all all 0.0.0.0/0 md5" >> "$PGDATA/pg_hba.conf"

    log "PostgreSQL configuration complete"
}


# Main execution
if [ "$1" = 'postgres' ]; then
    # Ensure PGDATA directory exists and has correct permissions
    mkdir -p "$PGDATA"
    chown postgres:postgres "$PGDATA"
    chmod 700 "$PGDATA"

    if [ ! -s "$PGDATA/PG_VERSION" ]; then
        initialize_database
        configure_postgresql
    fi

    # Ensure PGSOCKET directory exists and has correct permissions
    mkdir -p "$PGSOCKET"
    chown postgres:postgres "$PGSOCKET"
    chmod 775 "$PGSOCKET"

    log "Starting PostgreSQL server..."
    exec gosu postgres /opt/pgpro/1c-16/bin/postgres -D "$PGDATA"
else
    exec "$@"
fi
